name: "Run Testsuite"
description: "Runs the tests in the matrix"
inputs:
  mode:
    required: true
    type: string
  target:
    required: true
    type: string
  gcchash:
    required: true
    type: string
  multilib:
    required: true
    type: string
  multitarget:
    required: false
    type: string

runs:
  using: "composite"
  steps:

    - name: Restore submodules from cache
      uses: actions/download-artifact@v3
      with:
        name: gcc-sources-${{ inputs.gcchash }}

    - name: Restore submodules
      shell: bash
      run: |
        rm -rf .git binutils dejagnu gcc gdb glibc musl newlib pk qemu
        unzip cache.zip
        rm -rf cache.zip

    - name: Checkout gcc hash
      shell: bash
      run: |
        cd gcc
        git fetch
        git reset --hard origin/master
        git checkout master
        git checkout ${{ inputs.gcchash }}

    - name: Install dependencies
      shell: bash
      run: sudo ./.github/setup-apt.sh

    - name: Configure
      shell: bash
      run: |
        mkdir build
        cd build
        if [ "${{ inputs.multilib }}" == "multilib" ]; then
          ../configure --prefix=$(pwd) --with-multilib-generator="rv64gc-lp64d--;rv32gc-ilp32d--"
        else
          TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
          ../configure --prefix=$(pwd) --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]}
        fi

    - name: Restore stage2
      uses: actions/download-artifact@v3
      with:
        name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-stage2

    - name: Unzip artifacts
      shell: bash
      run: |
        unzip -n stage2.zip
        rm -rf stage2.zip

    # We need to use future timestamps since some stamps are generated during build process and invalidate the stamps here.
    # Future timestamps prevent that invalidation.
    - name: Generate fake stamps to prevent rebuilding
      shell: bash
      run: |
        mkdir -p build/stamps
        cd build/stamps
        touch -d "+2 days" check-write-permission
        touch -d "+2 days" build-gdb-${{ inputs.mode }}
        touch -d "+2 days" build-binutils-${{ inputs.mode }}
        touch -d "+2 days" build-linux-headers
        touch -d "+2 days" build-gcc-${{ inputs.mode }}-stage1
        touch -d "+2 days" build-glibc-linux-headers
        touch -d "+2 days" build-glibc-linux-rv32gc-ilp32d
        touch -d "+2 days" build-glibc-linux-rv32imac-ilp32
        touch -d "+2 days" build-glibc-linux-rv32imafdc-ilp32d
        touch -d "+2 days" build-glibc-linux-rv32gcv-ilp32d
        touch -d "+2 days" build-glibc-linux-rv32gc_zba_zbb_zbc_zbs-ilp32d
        touch -d "+2 days" build-glibc-linux-rv32gcv_zvbb_zvbc_zvkg_zvkn_zvknc_zvkned_zvkng_zvknha_zvknhb_zvks_zvksc_zvksed_zvksg_zvksh_zvkt-ilp32d
        touch -d "+2 days" build-glibc-linux-rv64gc-lp64d
        touch -d "+2 days" build-glibc-linux-rv64imac-lp64
        touch -d "+2 days" build-glibc-linux-rv64imafdc-lp64d
        touch -d "+2 days" build-glibc-linux-rv64gcv-lp64d
        touch -d "+2 days" build-glibc-linux-rv64gc_zba_zbb_zbc_zbs-lp64d
        touch -d "+2 days" build-glibc-linux-rv64gcv_zvbb_zvbc_zvkg_zvkn_zvknc_zvkned_zvkng_zvknha_zvknhb_zvks_zvksc_zvksed_zvksg_zvksh_zvkt-lp64d
        touch -d "+2 days" build-glibc-linux-rv64imafdcv_zicond_zawrs_zbc_zvkng_zvksg_zvbb_zvbc_zicsr_zba_zbb_zbs_zicbom_zicbop_zicboz_zfhmin_zkt-lp64d
        touch -d "+2 days" build-newlib-nano
        touch -d "+2 days" build-${{ inputs.mode }}
        touch -d "+2 days" merge-newlib-nano
        touch -d "+2 days" build-gcc-${{ inputs.mode }}-stage2

    # Checks that the cache has been properly setup (make doesn't try rebuilding)
    - name: Build sanity check (should be instant)
      shell: bash
      run: |
        cd build
        make -d ${{ inputs.mode }}

    - name: Reinstall stage2
      shell: bash
      run: |
        cd build
        cd build-gcc-${{ inputs.mode }}-stage2
        make install

    - name: Run testsuite
      shell: bash
      run: |
        cd build
        make -j $(nproc) report-${{ inputs.mode }} || true
        
    - name: Build debug log zip
      shell: bash
      run: |
        if [ "${{ inputs.mode }}" == "newlib" ]; then
          cat `find build/build-gcc-newlib-stage2/gcc/testsuite/ -name g*.log` > gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-debug-output.log
        else
          cat `find build/build-gcc-linux-stage2/gcc/testsuite/ -name g*.log` > gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-debug-output.log
        fi
        zip -r gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-debug-output.zip gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-debug-output.log

    - name: Upload debug artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-debug-output.log
        path: |
          gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-debug-output.log
        retention-days: 90

    - name: Save results
      shell: bash
      run: |
        if [ "${{ inputs.mode }}" == "newlib" ]; then
          PARSE_EXISTING_REPORT="./scripts/testsuite-filter gcc newlib test/allowlist `find build/build-gcc-newlib-stage2/gcc/testsuite/ -name *.sum |paste -sd "," -`"
        else
          PARSE_EXISTING_REPORT="./scripts/testsuite-filter gcc glibc test/allowlist `find build/build-gcc-linux-stage2/gcc/testsuite/ -name *.sum |paste -sd "," -`"
        fi
        $PARSE_EXISTING_REPORT | tee gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report.log

    - name: Upload results artifact
      uses: actions/upload-artifact@v3
      with:
        name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report.log
        path: |
          gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report.log
        retention-days: 90
