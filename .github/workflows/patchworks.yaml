name: Patchworks

on:
  schedule:
    # Run every 15 minutes
    - cron: "*/15 * * * *"
  pull_request:
    branches:
      - patchworks-ci
  push:
    branches:
      - patchworks-ci

jobs:
  fetch_patches:
    # Might need to set up a dedicated self hosted runner to always run this on time
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Get list of new patches
        run: |
          TZ=UTC date -d "@$((($(date +%s) + 450) / 900 * 900))" '+%Y-%m-%dT%H:%M:%S' > date_recent.txt
          TZ=UTC date -d "@$((($(date +%s) - 450) / 900 * 900))" '+%Y-%m-%dT%H:%M:%S' > date_old.txt
          TZ=UTC date -d "@$((($(date +%s) - 1350) / 900 * 900))" '+%Y-%m-%dT%H:%M:%S' > date_older.txt

          mkdir patch_urls
          python scripts/create_patches_files.py -backup $(cat date_older.txt) -start $(cat date_old.txt) -end $(cat date_recent.txt)

      - name: List patch artifacts
        id: list_patches
        run: |
          export PATCHLIST="$(cat artifact_names.txt)"
          echo "patch_list=$PATCHLIST" >> $GITHUB_OUTPUT

      - name: Make artifact zip
        run: |
          zip -r patch_files.zip patch_urls

      - name: Upload artifact zip
        uses: actions/upload-artifact@v3
        with:
          name: patch_urls
          path: |
            patch_files.zip
          retention-days: 90

    outputs:
      list_of_patch_names: ${{ steps.list_patches.outputs.patch_list }}

  prepare_sources:
    runs-on: ubuntu-20.04
    needs: [fetch_patches]
    if: ${{ needs.fetch_patches.outputs.list_of_patch_names != '[]' }}
    steps:
      - uses: actions/checkout@v3

      - name: Determine baseline
        id: gcc-hash
        run: |
          echo TODO
          ls
          ls ./scripts/get_baseline_hash.py
          python ./scripts/get_baseline_hash.py -token ${{ secrets.GITHUB_TOKEN }}

          export GCCHASH=$(python ./scripts/get_baseline_hash.py -token ${{ secrets.GITHUB_TOKEN }})
          echo $GCCHASH
          echo "gcchash=$GCCHASH" >> $GITHUB_OUTPUT

      - name: Retrieve cache
        id: retrieve-cache
        uses: actions/cache@v3
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            newlib
            qemu
          key: submodules-archive-2 # Numbered archive to allow for easy transition when bumping submodules

      - name: Initalize submodules cache
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init --recursive --depth 1 binutils
          git submodule update --init --recursive --depth 1 dejagnu
          git submodule update --init --recursive --depth 1 gdb
          git submodule update --init --recursive --depth 1 glibc
          git submodule update --init --recursive --depth 1 newlib
          git submodule update --init --recursive --depth 1 qemu
          rm -rf gcc
          git clone git://gcc.gnu.org/git/gcc.git

      - name: Get GCC hash
        run: |
          cd gcc
          git checkout master
          git pull

      - name: Cache submodules
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            newlib
            qemu
          key: submodules-archive-2

      - name: Make cache zip
        run: |
          zip -r cache.zip .git binutils dejagnu gcc gdb glibc newlib qemu

      # Use artifact rather than cache since cache downloads are flaky/hang.
      # Artifacts are reliable but ~30 min slower to set up.
      # Setup is done on one runner, so this isn't a show stopper.
      - name: Upload git cache
        uses: actions/upload-artifact@v3
        with:
          name: gcc-sources-${{ steps.gcc-hash.outputs.gcchash }}
          path: |
            cache.zip
          retention-days: 5

      - name: Download baseline results
        run: |
          sudo apt remove python3-pip
          wget https://bootstrap.pypa.io/get-pip.py
          sudo python3 get-pip.py
          pip install -U pyopenssl cryptography pygithub requests
          mkdir temp
          python ./scripts/download_single_artifact.py -name ${{ steps.gcc-hash.outputs.gcchash }}-current-logs -token ${{ secrets.GITHUB_TOKEN }} -outdir ./temp


      - name: Extract baseline results
        run: |
          mv ./temp/current_logs.zip .
          unzip current_logs.zip
          mv current_logs previous_logs

      - name: Make previous logs artifact
        run: |
          zip -r previous_logs.zip previous_logs

      - name: Upload baseline results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.gcc-hash.outputs.gcchash }}-previous-logs
          path: |
            previous_logs.zip
          retention-days: 90

    outputs:
      gcchash: ${{ steps.gcc-hash.outputs.gcchash }}

  patch_matrix:
    needs: [fetch_patches, prepare_sources]
    strategy:
      matrix:
        patch_name: ${{ fromJSON(needs.fetch_patches.outputs.list_of_patch_names) }}
    uses: ./.github/workflows/run_checks.yaml
    with:
      patch_name: ${{ matrix.patch_name }}
      gcchash: ${{ needs.prepare_sources.outputs.gcchash }}
