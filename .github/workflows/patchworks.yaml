name: Patchworks

on:
  # Don't enable schedule until it's ready
  # schedule:
  #   # Run every 15 minutes
  #   - cron: "*/15 * * * *"
  pull_request:
    branches:
      - patchworks-ci
  push:
    branches:
      - patchworks-ci

jobs:
  fetch_patches:
    # Might need to set up a dedicated self hosted runner to always run this on time
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Get list of new patches
        run: |
          TZ=UTC date -d "@$((($(date +%s) + 450) / 900 * 900))" '+%Y-%m-%dT%H:%M:%S' > date_recent.txt
          TZ=UTC date -d "@$((($(date +%s) - 450) / 900 * 900))" '+%Y-%m-%dT%H:%M:%S' > date_old.txt

          mkdir patch_urls
          python scripts/create_patches_files.py -start $(cat date_old.txt) -end $(cat date_recent.txt)

      - name: List patch artifacts
        id: list_patches
        run: |
          export PATCHLIST="$(cat artifact_names.txt)"
          echo "patch_list=$PATCHLIST" >> $GITHUB_OUTPUT
      
      - name: Make artifact zip
        run: |
          zip -r patch_files.zip patch_urls

      - name: Upload artifact zip
        uses: actions/upload-artifact@v3
        with:
          name: patch_urls
          path: |
            patch_files.zip
          retention-days: 90

    outputs:
      list_of_patch_names: ${{ steps.list_patches.outputs.patch_list }}

  prepare_sources:
    runs-on: ubuntu-20.04
    needs: [fetch_patches]
    if: ${{ needs.fetch_patches.outputs.list_of_patch_names != '[]' }}
    steps:
      - uses: actions/checkout@v3

      - name: Determine baseline
        run: |
          echo TODO

      - name: Download baseline results
        run: |
          echo TODO
          # python ./scripts/download_single_artifact.py -name

      - name: Upload baseline results
        id: upload_baseline_results
        run: |
          echo TODO
          export BASELINE_RESULTS_ARTIFACT="['baseline results']"
          echo "baseline_results_artifact=$BASELINE_RESULTS_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Download sources
        run: |
          echo TODO

      - name: Zip
        run: |
          echo TODO

      - name: Upload
        id: upload_sources
        run: |
          echo TODO
          export SOURCES_ARTIFACT="['sources artifact']"
          echo "sources_artifact=$SOURCES_ARTIFACT" >> $GITHUB_OUTPUT

    outputs:
      sources_artifact: ${{ steps.upload_sources.outputs.sources_artifact }}
      baseline_results_artifact: ${{ steps.upload_baseline_results.outputs.baseline_results_artifact }}

  patch_matrix:
    needs: [fetch_patches, prepare_sources]
    strategy:
      matrix:
        patch_name: ${{ fromJSON(needs.fetch_patches.outputs.list_of_patch_names) }}
        sources_artifact: ${{ fromJSON(needs.prepare_sources.outputs.sources_artifact) }}
        baseline_results_artifact: ${{ fromJSON(needs.prepare_sources.outputs.baseline_results_artifact) }}
    uses: ./.github/workflows/run_checks.yaml
    with:
      patch_name: ${{ matrix.patch_name }}
      sources_artifact: ${{ matrix.sources_artifact }}
      baseline_results_artifact: ${{ matrix.baseline_results_artifact }}
