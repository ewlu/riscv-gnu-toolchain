name: Regression-Runner

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
      target:
        required: true
        type: string
      gcchash:
        required: true
        type: string
      multilib:
        required: true
        type: string
      multitarget:
        required: false
        type: string

jobs:
  check:
    runs-on: ubuntu-20.04
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Early exit
        if: ${{ inputs.multitarget != '' && !contains(inputs.multitarget, format('{0}:{1}', inputs.mode, inputs.target)) }}
        id: early-exit
        run: |
          export EARLY_EXIT="exit"
          echo "early_exit=$EARLY_EXIT" >> "$GITHUB_OUTPUT"

    outputs:
      early_exit: ${{ steps.early-exit.outputs.early_exit }}
      
  build:
    runs-on: ubuntu-20.04
    environment: production
    needs: [check]
    if: ${{ needs.check.outputs.early_exit != 'exit' }}
    steps:
      - name: Remove unneeded frameworks to recover disk space
        run: |
          echo "-- Before --"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          echo "-- After --"
          df -h

      - uses: actions/checkout@v3

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.gcchash }}

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc musl newlib pk qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.gcchash }}

      - name: Install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Configure
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            ../configure --prefix=$(pwd) --enable-multilib --with-multilib-generator="rv64gc-lp64d--;rv32gc-ilp32d--"
          else
            TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
            ../configure --prefix=$(pwd) --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]}
          fi

      - name: Make gcc
        run: |
          cd build
          make -j $(nproc) ${{ inputs.mode }}

      - name: Remove sources to reclaim disk space
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc musl newlib pk qemu

      - name: Zip binaries
        run: |
          zip -r gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}.zip build/bin

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}
          path: |
            gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}.zip
          retention-days: 5

      # Running testsuite (stamps/check-gcc-*) only uses stage2 & assorted folders
      - name: Zip stage2
        if: inputs.mode != 'musl'
        run: |
          zip --symlinks -r stage2.zip build

      - name: Upload stage2 artifact
        if: inputs.mode != 'musl'
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-stage2
          path: |
            stage2.zip
          retention-days: 5

      - name: Output success
        id: build-success
        run: |
          export BUILD_SUCCESS="success"
          echo $BUILD_SUCCESS
          echo "build_success=$BUILD_SUCCESS" >> "$GITHUB_OUTPUT"

    outputs:
      build_success: ${{ steps.build-success.outputs.build_success }}

  test:
    needs: [check, build]
    if: ${{ needs.check.outputs.early_exit != 'exit' && inputs.mode != 'musl' }}
    uses: ./.github/workflows/run-tests.yaml
    with:
      image: ubuntu-20.04
      mode: ${{ inputs.mode }}
      target: ${{ inputs.target }}
      gcchash: ${{ inputs.gcchash }}
      multilib: ${{ inputs.multilib }}
      multitarget: ${{ inputs.multitarget }}

  rerun-timeouts:
    needs: [check, build, test]
    if: ${{ failure() && needs.build.outputs.build_success == 'success' }}
    uses: ./.github/workflows/run-tests.yaml
    with:
      image: self-hosted
      mode: ${{ inputs.mode }}
      target: ${{ inputs.target }}
      gcchash: ${{ inputs.gcchash }}
      multilib: ${{ inputs.multilib }}
      multitarget: ${{ inputs.multitarget }}
